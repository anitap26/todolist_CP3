pipeline {
    agent any

    environment {
        AWS_REGION          = 'us-east-1'
        APP_NAME            = 'todolist'
        REPO_URL            = 'https://github.com/anitap26/todolist_CP3.git'
        STACK_NAME          = 'todolist-staging'
        S3_BUCKET           = 'aws-sam-cli-managed-default-samclisourcebucket-fnxysdhusbno'
        TEMPLATE_FILE       = '.aws-sam/build/template.yaml'
        DYNAMODB_TABLE_NAME = 'TodosDynamoDbTable'  // Valor por defecto
    }

    stages {

        stage('Get Code') {
            steps {
                script {
                    echo "Descargando el código de la rama develop..."
                    if (!fileExists('.git')) {
                        sh "git clone ${REPO_URL} ."
                        sh "git checkout develop"
                    } else {
                        sh "git checkout develop"
                        sh "git pull origin develop"
                    }
                }
            }
        }

        stage('Static Test') {
            steps {
                script {
                    sh """
                        pip install flake8 bandit
                        export PATH=\$PATH:\$HOME/.local/bin
                        mkdir -p reports
                        flake8 src --output-file=reports/flake8_report.txt || true
                        bandit -r src -f json -o reports/bandit_report.json || true
                        touch reports/dummy.txt
                    """
                    sh "ls -la reports/"
                    sh "echo 'Contenido de flake8_report.txt:'; cat reports/flake8_report.txt || true"
                    sh "echo 'Contenido de bandit_report.json:'; cat reports/bandit_report.json || true"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/reports/*', fingerprint: true
                }
            }
        }

        stage('Generate Unique Table Name') {
            steps {
                script {
                    echo "Generando nombre único para la tabla DynamoDB..."
                    def uniqueId = sh(script: "echo \$(date +%s) | sha256sum | head -c 8", returnStdout: true).trim()
                    env.DYNAMODB_TABLE_NAME = "TodosDynamoDbTable${uniqueId}"
                    echo "Nombre de tabla generado: ${env.DYNAMODB_TABLE_NAME}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh """
                        echo "Instalando dependencias..."
                        pip install aws-sam-cli
                        echo "Verificando SAM CLI..."
                        sam --version
                        echo "Construyendo la aplicación con SAM..."
                        sam build
                        echo "Validando la plantilla de SAM..."
                        sam validate --region ${AWS_REGION}
                        echo "Desplegando en Staging..."
                        sam deploy --stack-name ${STACK_NAME} \\
                                   --s3-bucket ${S3_BUCKET} \\
                                   --s3-prefix todo-list-aws \\
                                   --template-file ${TEMPLATE_FILE} \\
                                   --region ${AWS_REGION} \\
                                   --no-confirm-changeset \\
                                   --capabilities CAPABILITY_IAM \\
                                   --parameter-overrides Stage=staging DynamoDbTableName=${DYNAMODB_TABLE_NAME} || true
                    """
                }
            }
        }

        stage('Get API URL') {
            steps {
                script {
                    echo 'Obteniendo URL de la API desplegada...'
                    def apiUrl = sh(script: "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query \"Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue\" --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    
                    if (!apiUrl || apiUrl == "None") {
                        error("No se pudo obtener la URL de la API desde CloudFormation. Verifica que el API Gateway se haya creado correctamente.")
                    }
                    echo "API URL obtenida: ${apiUrl}"
                    env.API_URL = apiUrl
                }
            }
        }

        stage('Rest Test') {
            steps {
                script {
                    if (!env.API_URL) {
                        error("No se pudo obtener la URL de la API. Fallando el pipeline.")
                    }
                    def apiBaseUrl = env.API_URL.endsWith("/") ? env.API_URL.dropRight(1) : env.API_URL
                    echo "Ejecutando pruebas REST en: ${apiBaseUrl}"
                    sh """
                        mkdir -p reports
                        echo "Ejecutando pruebas REST en ${apiBaseUrl}..." > reports/rest_test_report.txt

                        # 1) GET /todos: Guardar salida real en actual_output.txt
                        echo "1) GET /todos" >> reports/rest_test_report.txt
                        curl -s ${apiBaseUrl}/todos > actual_output.txt
                        response=\$(curl -s -o /dev/null -w "%{http_code}" ${apiBaseUrl}/todos)
                        echo "Código de respuesta GET /todos: \$response" >> reports/rest_test_report.txt
                        if [ "\$response" -ne 200 ]; then 
                            echo "Error en GET /todos" >> reports/rest_test_report.txt
                            exit 1
                        fi
                        echo "Contenido real de GET /todos:" >> reports/rest_test_report.txt
                        cat actual_output.txt >> reports/rest_test_report.txt

                        # 2) Comparación con el resultado esperado (expected_output.txt debe existir)
                        echo "Comparando salida real con la esperada..." >> reports/rest_test_report.txt
                        diff expected_output.txt actual_output.txt > diff_report.txt || true
                        if [ -s diff_report.txt ]; then
                            echo "Diferencias encontradas:" >> reports/rest_test_report.txt
                            cat diff_report.txt >> reports/rest_test_report.txt
                            echo "La salida no coincide con lo esperado." >> reports/rest_test_report.txt
                            exit 1
                        else
                            echo "No hay diferencias: la salida coincide con lo esperado." >> reports/rest_test_report.txt
                        fi

                        # 3) POST /todos
                        echo "2) POST /todos" >> reports/rest_test_report.txt
                        TODO_RESPONSE=\$(curl -s -X POST ${apiBaseUrl}/todos -H "Content-Type: application/json" -d '{"text": "Test TODO"}')
                        echo "Salida POST /todos: \$TODO_RESPONSE" >> reports/rest_test_report.txt
                        TODO_ID=\$(echo \$TODO_RESPONSE | jq -r '.body | fromjson | .id')
                        echo "ID del TODO creado: \$TODO_ID" >> reports/rest_test_report.txt

                        # 4) GET /todos/\$TODO_ID
                        echo "3) GET /todos/\$TODO_ID" >> reports/rest_test_report.txt
                        response=\$(curl -s -o /dev/null -w "%{http_code}" ${apiBaseUrl}/todos/\$TODO_ID)
                        echo "Código de respuesta GET /todos/\$TODO_ID: \$response" >> reports/rest_test_report.txt
                        if [ "\$response" -ne 200 ]; then echo "Error en GET /todos/\$TODO_ID" >> reports/rest_test_report.txt; exit 1; fi

                        # 5) PUT /todos/\$TODO_ID
                        echo "4) PUT /todos/\$TODO_ID" >> reports/rest_test_report.txt
                        PUT_RESPONSE=\$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT ${apiBaseUrl}/todos/\$TODO_ID/ -H "Content-Type: application/json" -d '{"text": "Updated TODO", "checked": false}')
                        PUT_BODY=\$(echo \$PUT_RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
                        PUT_STATUS=\$(echo \$PUT_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                        echo "PUT status: \$PUT_STATUS" >> reports/rest_test_report.txt
                        echo "PUT body: \$PUT_BODY" >> reports/rest_test_report.txt
                        if [ "\$PUT_STATUS" -ne 200 ]; then echo "Error en PUT /todos/\$TODO_ID" >> reports/rest_test_report.txt; exit 1; fi

                        # 6) DELETE /todos/\$TODO_ID
                        echo "5) DELETE /todos/\$TODO_ID" >> reports/rest_test_report.txt
                        response=\$(curl -s -o /dev/null -w "%{http_code}" -X DELETE ${apiBaseUrl}/todos/\$TODO_ID)
                        echo "Código de respuesta DELETE: \$response" >> reports/rest_test_report.txt
                        if [ "\$response" -ne 200 ]; then echo "Error en DELETE /todos/\$TODO_ID" >> reports/rest_test_report.txt; exit 1; fi

                        echo "Todas las pruebas REST pasaron correctamente." >> reports/rest_test_report.txt
                        cat reports/rest_test_report.txt
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'reports/rest_test_report.txt, actual_output.txt, diff_report.txt', fingerprint: true
                }
            }
        }

        stage('Promote') {
            steps {
                script {
                    echo "Actualizando la rama master..."
                    sh "git checkout master"
                    sh "git fetch origin master"
                    sh "git merge origin/master"
                    echo "Fusionando develop en master..."
                    sh "git merge develop"
                    echo "Empujando cambios a GitHub..."
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh '''#!/bin/bash
                        git push https://x-access-token:$GITHUB_TOKEN@github.com/anitap26/todolist_CP3.git master
                        '''
                    }
                }
            }
        }
    }
}
