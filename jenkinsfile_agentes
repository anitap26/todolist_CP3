pipeline {
    agent none

    environment {
        AWS_REGION       = 'us-east-1'
        APP_NAME         = 'todolist'
        REPO_URL         = 'https://github.com/anitap26/todolist_CP3.git'
        STACK_NAME       = 'todolist-staging'
        CONFIG_REPO_BASE = 'https://raw.githubusercontent.com/anitap26/todo-list-aws-config/production'
    }

    stages {

        stage('Get Code') {
            agent { label 'principal' }
            steps {
                script {
                    echo "== Get Code =="
                    sh '''
                        echo "Usuario: $(whoami)"
                        echo "Hostname: $(hostname)"
                        echo "Workspace: ${WORKSPACE}"
                    '''
                    echo "Descargando el código de la rama master..."
                    if (!fileExists('.git')) {
                        sh "git clone ${REPO_URL} ."
                        sh "git checkout develop"
                    } else {
                        sh "git checkout develop"
                        sh "git pull origin develop"
                    }
                    
                    echo "Descargando archivo de configuración samconfig.toml para production..."
                    sh "wget ${CONFIG_REPO_BASE}/samconfig.toml -O samconfig.toml"
                }
            }
        }

        stage('Deploy') {
            agent { label 'principal' }
            steps {
                script {
                    echo "== Deploy =="
                    sh '''
                        echo "Usuario: $(whoami)"
                        echo "Hostname: $(hostname)"
                        echo "Workspace: ${WORKSPACE}"
                    '''
                    echo "Desplegando la aplicación en producción..."
                    sh """
                        echo "Instalando dependencias..."
                        pip install aws-sam-cli

                        echo "Verificando SAM CLI..."
                        sam --version

                        echo "Construyendo la aplicación con SAM..."
                        sam build

                        echo "Validando la plantilla de SAM..."
                        sam validate --region ${AWS_REGION}

                        echo "Desplegando en Production..."
                        sam deploy --config-file samconfig.toml --config-env production \\
                                   --no-confirm-changeset \\
                                   --capabilities CAPABILITY_IAM || true
                    """
                }
            }
        }

        stage('Get API URL') {
            agent { label 'principal' }
            steps {
                script {
                    echo "== Get API URL =="
                    sh '''
                        echo "Usuario: $(whoami)"
                        echo "Hostname: $(hostname)"
                        echo "Workspace: ${WORKSPACE}"
                    '''
                    echo "Obteniendo URL de la API desplegada..."
                    def apiUrl = sh(script: """
                        aws cloudformation describe-stacks --stack-name ${STACK_NAME} \\
                        --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \\
                        --output text --region ${AWS_REGION}
                    """, returnStdout: true).trim()
                    
                    if (!apiUrl || apiUrl == "None") {
                        error("No se pudo obtener la URL de la API desde CloudFormation. Verifica que el API Gateway se haya creado correctamente.")
                    }
                    echo "API URL obtenida: ${apiUrl}"
                    writeFile file: 'api_url.txt', text: apiUrl
                    stash includes: 'api_url.txt', name: 'apiUrlStash'
                }
            }
        }

        stage('Rest Test') {
            agent { label 'rest' }
            steps {
                script {
                    echo "== Rest Test =="
                    sh '''
                        echo "Usuario: $(whoami)"
                        echo "Hostname: $(hostname)"
                        echo "Workspace: ${WORKSPACE}"
                    '''
                    unstash 'apiUrlStash'
                    def apiBaseUrl = readFile('api_url.txt').trim()
                    echo "Ejecutando pruebas REST con Pytest, utilizando BASE_URL=${apiBaseUrl}"
                    sh """
                        export PATH=\$PATH:/var/lib/jenkins/.local/bin
                        mkdir -p reports
                        pip install pytest requests
                        BASE_URL=${apiBaseUrl} pytest -v test/integration/todoApiTest.py --junitxml=reports/pytest_report.xml || exit 1
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'reports/pytest_report.xml', fingerprint: true
                }
            }
        }
    }
}
